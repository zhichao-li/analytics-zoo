/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "memkind.h"
/* Header for class com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator */

#ifndef _Included_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
#define _Included_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    initialize
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_initialize
  (JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    allocate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_allocate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    free
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_free
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    copy
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_copy
  (JNIEnv *, jobject, jlong, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
