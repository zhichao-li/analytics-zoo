/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>
#include <cstdio>
#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <stdexcept>
#include <sstream>
#include <string>
#include <iostream>

#include "com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator.h"
using namespace std;


struct memkind *pmem_kind;

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    initialize
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_initialize
  (JNIEnv *env, jobject, jstring path, jlong size) {
    const char* str = env->GetStringUTFChars(path, NULL);
    if (NULL == str) {
      throw std::invalid_argument("Initial path can't be NULL.\n");
    }
    std::cout<<str<<"\n";
    std::cout<<size<<"\n";

    size_t sz = (size_t)size;
    int error = memkind_create_pmem("/mnt/pmem0", sz, &pmem_kind);

//    int error = memkind_create_pmem("/mnt/pmem0", PMEM_MAX_SIZE, &pmem_kind);
    if (error) {
    std::stringstream ss;
    char msg[200];
    memkind_error_message(error, msg, 200);
    ss << "memkind_create_pmem failed! error code is: " << error << msg <<"\n";
    throw std::runtime_error(ss.str());
    }

    env->ReleaseStringUTFChars(path, str);
  }

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    allocate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_allocate
(JNIEnv *, jobject, jlong size) {
//    void* ptr = (void*) malloc(size);
//    return (jlong)ptr;
  if (NULL == pmem_kind) {
    throw std::invalid_argument("We should init the AEP memory first.\n");
  }
  size_t sz = (size_t)size;
  void *p = memkind_malloc(pmem_kind, sz);
  // if (p == NULL) {
  //  throw std::runtime_error("Out of memory!\n");
  // }
  return (jlong)p;
  }

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    free
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_free
  (JNIEnv *,  jobject, jlong addr) {
//  free((void *)addr);
  if (NULL == pmem_kind) {
    throw std::invalid_argument("We should init the AEP memory first.\n");
  }

  memkind_free(pmem_kind, (void *)addr);
  }

/*
 * Class:     com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator
 * Method:    copy
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_persistent_memory_PersistentMemoryAllocator_copy
  (JNIEnv *, jobject, jlong dest, jlong src, jlong size) {
    memcpy((void *)dest, (void *)src, size);
 }