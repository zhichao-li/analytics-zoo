/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>
#include <cstdio>
#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <stdexcept>

#include "com_intel_analytics_zoo_aep_AEPHandler.h"

using memkind = struct memkind;
memkind *pmemkind = NULL;

/*
 * Class:     com_intel_analytics_zoo_aep_AEPHandler
 * Method:    initialize
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_aep_AEPHandler_initialize
  (JNIEnv *env, jclass, jstring path, jlong size) {
    const char* str = env->GetStringUTFChars(path, NULL);
    if (NULL == str) {
      throw std::invalid_argument("Initial path can't be NULL.\n");
    }

    size_t sz = (size_t)size;
    int error = memkind_create_pmem(str, sz, &pmemkind);
    if (error) {
      throw std::runtime_error("memkind_create_pmem failed!\n");
    }

    env->ReleaseStringUTFChars(path, str);
  }

/*
 * Class:     com_intel_analytics_zoo_aep_AEPHandler
 * Method:    allocate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_zoo_aep_AEPHandler_allocate
  (JNIEnv *, jclass, jlong size) {
//    void* ptr = (void*) malloc(size);
//    return (jlong)ptr;
  if (NULL == pmemkind) {
    throw std::invalid_argument("We should init the AEP memory first.\n");
  }
  size_t sz = (size_t)size;
  void *p = memkind_malloc(pmemkind, sz);
  // if (p == NULL) {
  //  throw std::runtime_error("Out of memory!\n");
  // }
  return (jlong)p;
  }

/*
 * Class:     com_intel_analytics_zoo_aep_AEPHandler
 * Method:    free
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_aep_AEPHandler_free
  (JNIEnv *, jclass, jlong addr) {
//  free((void *)addr);
  if (NULL == pmemkind) {
    throw std::invalid_argument("We should init the AEP memory first.\n");
  }

  memkind_free(pmemkind, (void *)addr);
  }

/*
 * Class:     com_intel_analytics_zoo_aep_AEPHandler
 * Method:    copy
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_zoo_aep_AEPHandler_copy
  (JNIEnv *, jclass, jlong dest, jlong src, jlong size) {
    memcpy((void *)dest, (void *)src, size);
 }